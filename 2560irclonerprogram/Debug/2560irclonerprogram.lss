
2560irclonerprogram.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000008e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000870  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800200  00800200  000008e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019fc  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001112  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001171  00000000  00000000  00003502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00004674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001539c  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e1  00000000  00000000  00019c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0001a405  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004fe0  00000000  00000000  0001a4ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	37 c1       	rjmp	.+622    	; 0x284 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e7       	ldi	r30, 0x70	; 112
  fc:	f8 e0       	ldi	r31, 0x08	; 8
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 30       	cpi	r26, 0x0B	; 11
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	7f d1       	rcall	.+766    	; 0x41e <main>
 120:	a5 c3       	rjmp	.+1866   	; 0x86c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 124:	04 c0       	rjmp	.+8      	; 0x12e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 126:	61 50       	subi	r22, 0x01	; 1
 128:	71 09       	sbc	r23, r1
 12a:	81 09       	sbc	r24, r1
 12c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 12e:	61 15       	cp	r22, r1
 130:	71 05       	cpc	r23, r1
 132:	81 05       	cpc	r24, r1
 134:	91 05       	cpc	r25, r1
 136:	b9 f7       	brne	.-18     	; 0x126 <__portable_avr_delay_cycles+0x2>
 138:	08 95       	ret

0000013a <my_delay_us>:
void my_delay_ms(uint16_t miliseconds);
bool read_pin_level(port_pin_t pin);
void sendIRCode(uint32_t code);

void my_delay_us(uint16_t microseconds)
{
 13a:	af 92       	push	r10
 13c:	bf 92       	push	r11
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	delay_us(microseconds);
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	89 f1       	breq	.+98     	; 0x1b4 <my_delay_us+0x7a>
 152:	68 94       	set
 154:	aa 24       	eor	r10, r10
 156:	a6 f8       	bld	r10, 6
 158:	0f 2e       	mov	r0, r31
 15a:	f2 e4       	ldi	r31, 0x42	; 66
 15c:	bf 2e       	mov	r11, r31
 15e:	f0 2d       	mov	r31, r0
 160:	0f 2e       	mov	r0, r31
 162:	ff e0       	ldi	r31, 0x0F	; 15
 164:	cf 2e       	mov	r12, r31
 166:	f0 2d       	mov	r31, r0
 168:	d1 2c       	mov	r13, r1
 16a:	e1 2c       	mov	r14, r1
 16c:	f1 2c       	mov	r15, r1
 16e:	00 e0       	ldi	r16, 0x00	; 0
 170:	10 e0       	ldi	r17, 0x00	; 0
 172:	28 2f       	mov	r18, r24
 174:	39 2f       	mov	r19, r25
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	50 e0       	ldi	r21, 0x00	; 0
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	c5 d2       	rcall	.+1418   	; 0x70e <__muldi3>
 184:	0f 2e       	mov	r0, r31
 186:	f6 e0       	ldi	r31, 0x06	; 6
 188:	af 2e       	mov	r10, r31
 18a:	f0 2d       	mov	r31, r0
 18c:	b1 2c       	mov	r11, r1
 18e:	c1 2c       	mov	r12, r1
 190:	11 d3       	rcall	.+1570   	; 0x7b4 <__udivdi3>
 192:	21 5c       	subi	r18, 0xC1	; 193
 194:	3d 4b       	sbci	r19, 0xBD	; 189
 196:	40 4f       	sbci	r20, 0xF0	; 240
 198:	5f 4f       	sbci	r21, 0xFF	; 255
 19a:	6f 4f       	sbci	r22, 0xFF	; 255
 19c:	7f 4f       	sbci	r23, 0xFF	; 255
 19e:	8f 4f       	sbci	r24, 0xFF	; 255
 1a0:	9f 4f       	sbci	r25, 0xFF	; 255
 1a2:	17 d2       	rcall	.+1070   	; 0x5d2 <__floatundisf>
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	34 e2       	ldi	r19, 0x24	; 36
 1a8:	44 e7       	ldi	r20, 0x74	; 116
 1aa:	59 e4       	ldi	r21, 0x49	; 73
 1ac:	7e d1       	rcall	.+764    	; 0x4aa <__divsf3>
 1ae:	e5 d1       	rcall	.+970    	; 0x57a <__fixunssfsi>
 1b0:	b9 df       	rcall	.-142    	; 0x124 <__portable_avr_delay_cycles>
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <my_delay_us+0x84>
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	b3 df       	rcall	.-154    	; 0x124 <__portable_avr_delay_cycles>
 1be:	df 91       	pop	r29
}
 1c0:	cf 91       	pop	r28
 1c2:	1f 91       	pop	r17
 1c4:	0f 91       	pop	r16
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	bf 90       	pop	r11
 1d0:	af 90       	pop	r10
 1d2:	08 95       	ret

000001d4 <my_delay_ms>:
 1d4:	af 92       	push	r10
void my_delay_ms(uint16_t miliseconds){
 1d6:	bf 92       	push	r11
 1d8:	cf 92       	push	r12
 1da:	df 92       	push	r13
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
	delay_ms(miliseconds);
 1e8:	00 97       	sbiw	r24, 0x00	; 0
 1ea:	89 f1       	breq	.+98     	; 0x24e <my_delay_ms+0x7a>
 1ec:	68 94       	set
 1ee:	aa 24       	eor	r10, r10
 1f0:	a6 f8       	bld	r10, 6
 1f2:	0f 2e       	mov	r0, r31
 1f4:	f2 e4       	ldi	r31, 0x42	; 66
 1f6:	bf 2e       	mov	r11, r31
 1f8:	f0 2d       	mov	r31, r0
 1fa:	0f 2e       	mov	r0, r31
 1fc:	ff e0       	ldi	r31, 0x0F	; 15
 1fe:	cf 2e       	mov	r12, r31
 200:	f0 2d       	mov	r31, r0
 202:	d1 2c       	mov	r13, r1
 204:	e1 2c       	mov	r14, r1
 206:	f1 2c       	mov	r15, r1
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	28 2f       	mov	r18, r24
 20e:	39 2f       	mov	r19, r25
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	78 d2       	rcall	.+1264   	; 0x70e <__muldi3>
 21e:	0f 2e       	mov	r0, r31
 220:	f6 e0       	ldi	r31, 0x06	; 6
 222:	af 2e       	mov	r10, r31
 224:	f0 2d       	mov	r31, r0
 226:	b1 2c       	mov	r11, r1
 228:	c1 2c       	mov	r12, r1
 22a:	c4 d2       	rcall	.+1416   	; 0x7b4 <__udivdi3>
 22c:	29 51       	subi	r18, 0x19	; 25
 22e:	3c 4f       	sbci	r19, 0xFC	; 252
 230:	4f 4f       	sbci	r20, 0xFF	; 255
 232:	5f 4f       	sbci	r21, 0xFF	; 255
 234:	6f 4f       	sbci	r22, 0xFF	; 255
 236:	7f 4f       	sbci	r23, 0xFF	; 255
 238:	8f 4f       	sbci	r24, 0xFF	; 255
 23a:	9f 4f       	sbci	r25, 0xFF	; 255
 23c:	ca d1       	rcall	.+916    	; 0x5d2 <__floatundisf>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	4a e7       	ldi	r20, 0x7A	; 122
 244:	54 e4       	ldi	r21, 0x44	; 68
 246:	31 d1       	rcall	.+610    	; 0x4aa <__divsf3>
 248:	98 d1       	rcall	.+816    	; 0x57a <__fixunssfsi>
 24a:	6c df       	rcall	.-296    	; 0x124 <__portable_avr_delay_cycles>
 24c:	05 c0       	rjmp	.+10     	; 0x258 <my_delay_ms+0x84>
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	66 df       	rcall	.-308    	; 0x124 <__portable_avr_delay_cycles>
 258:	df 91       	pop	r29
}
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	ff 90       	pop	r15
 262:	ef 90       	pop	r14
 264:	df 90       	pop	r13
 266:	cf 90       	pop	r12
 268:	bf 90       	pop	r11
 26a:	af 90       	pop	r10
 26c:	08 95       	ret

0000026e <read_pin_level>:
 26e:	2f b1       	in	r18, 0x0f	; 15

bool read_pin_level(port_pin_t pin)
{
	return (PINF & (1 << pin)) != 0;
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	a9 01       	movw	r20, r18
 274:	02 c0       	rjmp	.+4      	; 0x27a <read_pin_level+0xc>
 276:	55 95       	asr	r21
 278:	47 95       	ror	r20
 27a:	8a 95       	dec	r24
 27c:	e2 f7       	brpl	.-8      	; 0x276 <read_pin_level+0x8>
 27e:	ca 01       	movw	r24, r20
}
 280:	81 70       	andi	r24, 0x01	; 1
 282:	08 95       	ret

00000284 <__vector_5>:

ISR(INT4_vect)
{
 284:	1f 92       	push	r1
 286:	0f 92       	push	r0
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	0f 92       	push	r0
 28c:	11 24       	eor	r1, r1
 28e:	0b b6       	in	r0, 0x3b	; 59
 290:	0f 92       	push	r0
 292:	cf 92       	push	r12
 294:	df 92       	push	r13
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
	static uint8_t dataBitCount = 0;
	static uint32_t receivedCode = 0;

	dataBitCount++;
 2b2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <dataBitCount.2743>
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	98 0f       	add	r25, r24
 2ba:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <dataBitCount.2743>
	if (dataBitCount == 1)
 2be:	91 30       	cpi	r25, 0x01	; 1
 2c0:	99 f4       	brne	.+38     	; 0x2e8 <__vector_5+0x64>
	{
		if (!read_pin_level(IR_RECEIVER_PIN))
 2c2:	84 e2       	ldi	r24, 0x24	; 36
 2c4:	d4 df       	rcall	.-88     	; 0x26e <read_pin_level>
 2c6:	81 11       	cpse	r24, r1
 2c8:	0c c0       	rjmp	.+24     	; 0x2e2 <__vector_5+0x5e>
		{
			isNECProtocol = true;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <isNECProtocol>
			receivedCode = 0;
 2d0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
 2d4:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2d8:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 2dc:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 2e0:	44 c0       	rjmp	.+136    	; 0x36a <__vector_5+0xe6>
		}
		else
		{
			isNECProtocol = false;
 2e2:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <isNECProtocol>
 2e6:	41 c0       	rjmp	.+130    	; 0x36a <__vector_5+0xe6>
			// Handle other protocols if needed
		}
	}
	else if (dataBitCount > 1 && dataBitCount <= 32)
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	8f 31       	cpi	r24, 0x1F	; 31
 2ec:	18 f5       	brcc	.+70     	; 0x334 <__vector_5+0xb0>
	{
		receivedCode <<= 1;
 2ee:	c0 90 00 02 	lds	r12, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 2f2:	d0 90 01 02 	lds	r13, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 2f6:	e0 90 02 02 	lds	r14, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 2fa:	f0 90 03 02 	lds	r15, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 2fe:	cc 0c       	add	r12, r12
 300:	dd 1c       	adc	r13, r13
 302:	ee 1c       	adc	r14, r14
 304:	ff 1c       	adc	r15, r15
 306:	c0 92 00 02 	sts	0x0200, r12	; 0x800200 <__DATA_REGION_ORIGIN__>
 30a:	d0 92 01 02 	sts	0x0201, r13	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 30e:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 312:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
		if (read_pin_level(IR_RECEIVER_PIN))
 316:	84 e2       	ldi	r24, 0x24	; 36
 318:	aa df       	rcall	.-172    	; 0x26e <read_pin_level>
 31a:	88 23       	and	r24, r24
 31c:	31 f1       	breq	.+76     	; 0x36a <__vector_5+0xe6>
		receivedCode |= 1;
 31e:	68 94       	set
 320:	c0 f8       	bld	r12, 0
 322:	c0 92 00 02 	sts	0x0200, r12	; 0x800200 <__DATA_REGION_ORIGIN__>
 326:	d0 92 01 02 	sts	0x0201, r13	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 32a:	e0 92 02 02 	sts	0x0202, r14	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 32e:	f0 92 03 02 	sts	0x0203, r15	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 332:	1b c0       	rjmp	.+54     	; 0x36a <__vector_5+0xe6>
	}
	else if (dataBitCount > 32)
 334:	91 32       	cpi	r25, 0x21	; 33
 336:	c8 f0       	brcs	.+50     	; 0x36a <__vector_5+0xe6>
	{
		if (isNECProtocol)
 338:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <isNECProtocol>
 33c:	88 23       	and	r24, r24
 33e:	99 f0       	breq	.+38     	; 0x366 <__vector_5+0xe2>
		{
			lastIrCode = receivedCode;
 340:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 344:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 348:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 34c:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 350:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <lastIrCode>
 354:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <lastIrCode+0x1>
 358:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <lastIrCode+0x2>
 35c:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <lastIrCode+0x3>
			irCodeReceived = 1;
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <irCodeReceived>
		}

		dataBitCount = 0;
 366:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <dataBitCount.2743>
	}
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	0f 90       	pop	r0
 38c:	0b be       	out	0x3b, r0	; 59
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <sendIRCode>:

	return 0;
}

void sendIRCode(uint32_t code)
{
 398:	af 92       	push	r10
 39a:	bf 92       	push	r11
 39c:	cf 92       	push	r12
 39e:	df 92       	push	r13
 3a0:	ef 92       	push	r14
 3a2:	ff 92       	push	r15
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	6b 01       	movw	r12, r22
 3ae:	7c 01       	movw	r14, r24
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 3b0:	a5 9a       	sbi	0x14, 5	; 20
	const uint16_t pulseDuration = period / 3; // Pulse duration in microseconds
	const uint16_t delayAfterTransmit = 2000; // Delay after transmission in microseconds

	// Transmission preamble
	ioport_set_pin_level(EMITTER_LED_PIN, true);
	my_delay_us(period);
 3b2:	8a e1       	ldi	r24, 0x1A	; 26
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	c1 de       	rcall	.-638    	; 0x13a <my_delay_us>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 3b8:	a5 98       	cbi	0x14, 5	; 20
	ioport_set_pin_level(EMITTER_LED_PIN, false);
	my_delay_us(period);
 3ba:	8a e1       	ldi	r24, 0x1A	; 26
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	bd de       	rcall	.-646    	; 0x13a <my_delay_us>
 3c0:	cf e1       	ldi	r28, 0x1F	; 31
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
	// Transmission of code bits
	for (uint8_t i = 0; i < 32; i++)
	{
		bool bitValue = (code >> (31 - i)) & 0x01;
		ioport_set_pin_level(EMITTER_LED_PIN, true);
		my_delay_us(bitValue ? pulseDuration : pulseDuration * 2);
 3c4:	08 e0       	ldi	r16, 0x08	; 8
 3c6:	10 e0       	ldi	r17, 0x00	; 0
 3c8:	68 94       	set
 3ca:	aa 24       	eor	r10, r10
 3cc:	a4 f8       	bld	r10, 4
 3ce:	b1 2c       	mov	r11, r1
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 3d0:	a5 9a       	sbi	0x14, 5	; 20
 3d2:	d7 01       	movw	r26, r14
 3d4:	c6 01       	movw	r24, r12
 3d6:	0c 2e       	mov	r0, r28
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <sendIRCode+0x4a>
 3da:	b6 95       	lsr	r27
 3dc:	a7 95       	ror	r26
 3de:	97 95       	ror	r25
 3e0:	87 95       	ror	r24
 3e2:	0a 94       	dec	r0
 3e4:	d2 f7       	brpl	.-12     	; 0x3da <sendIRCode+0x42>
 3e6:	80 fd       	sbrc	r24, 0
 3e8:	03 c0       	rjmp	.+6      	; 0x3f0 <sendIRCode+0x58>
 3ea:	8a 2d       	mov	r24, r10
 3ec:	9b 2d       	mov	r25, r11
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <sendIRCode+0x5c>
 3f0:	80 2f       	mov	r24, r16
 3f2:	91 2f       	mov	r25, r17
 3f4:	a2 de       	rcall	.-700    	; 0x13a <my_delay_us>
		ioport_set_pin_level(EMITTER_LED_PIN, false);
		my_delay_us(pulseDuration);
 3f6:	a5 98       	cbi	0x14, 5	; 20
 3f8:	80 2f       	mov	r24, r16
 3fa:	91 2f       	mov	r25, r17
 3fc:	9e de       	rcall	.-708    	; 0x13a <my_delay_us>
 3fe:	21 97       	sbiw	r28, 0x01	; 1
	}

	// Delay after transmission
	my_delay_us(delayAfterTransmit);
 400:	38 f7       	brcc	.-50     	; 0x3d0 <sendIRCode+0x38>
 402:	80 ed       	ldi	r24, 0xD0	; 208
 404:	97 e0       	ldi	r25, 0x07	; 7
 406:	99 de       	rcall	.-718    	; 0x13a <my_delay_us>
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	bf 90       	pop	r11
 41a:	af 90       	pop	r10
 41c:	08 95       	ret

0000041e <main>:
	}
}

int main(void)
{
	sysclk_init();
 41e:	25 d0       	rcall	.+74     	; 0x46a <sysclk_init>
	board_init();
 420:	43 d0       	rcall	.+134    	; 0x4a8 <board_init>
 422:	6c 98       	cbi	0x0d, 4	; 13
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIR &=  ~arch_ioport_pin_to_mask(pin);
 424:	74 9a       	sbi	0x0e, 4	; 14
{
#ifdef MEGA_RF
	PORT_t *base = arch_ioport_pin_to_base(pin);
	ioport_pin_t mask_pin = arch_ioport_pin_to_mask(pin);
	if (mode == IOPORT_MODE_PULLUP) {
		base->PORTDATA |=  mask_pin;
 426:	6d 9a       	sbi	0x0d, 5	; 13
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 428:	9d 9a       	sbi	0x13, 5	; 19
 42a:	ea e6       	ldi	r30, 0x6A	; 106

	// Initialize the emitter LED pin
	ioport_set_pin_dir(EMITTER_LED_PIN, IOPORT_DIR_OUTPUT);

	// Configure interrupt for IR receiver pin
	EICRB |= (1 << ISC41); // Set interrupt to trigger on any logical change
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	82 60       	ori	r24, 0x02	; 2
 432:	80 83       	st	Z, r24
 434:	ec 9a       	sbi	0x1d, 4	; 29
	EIMSK |= (1 << INT4);  // Enable INT4 interrupt
 436:	78 94       	sei

	sei(); // Enable global interrupts
 438:	c0 e2       	ldi	r28, 0x20	; 32
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
 43a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <irCodeReceived>

	while (1)
	{
		// Wait for the IR code to be received
		while (!irCodeReceived)
 43e:	88 23       	and	r24, r24
 440:	e1 f3       	breq	.-8      	; 0x43a <main+0x1c>
 442:	cc b9       	out	0x0c, r28	; 12
 444:	84 ef       	ldi	r24, 0xF4	; 244

		// IR code received, blink the debug LED
		for (int i = 0; i < 2; i++)
		{
			ioport_toggle_pin_level(IR_LED_PIN);
			my_delay_ms(500);
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	c5 de       	rcall	.-630    	; 0x1d4 <my_delay_ms>
 44a:	cc b9       	out	0x0c, r28	; 12
 44c:	84 ef       	ldi	r24, 0xF4	; 244
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	c1 de       	rcall	.-638    	; 0x1d4 <my_delay_ms>
 452:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <lastIrCode>
		}

		// Send the received IR code immediately
		sendIRCode(lastIrCode);
 456:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <lastIrCode+0x1>
 45a:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <lastIrCode+0x2>
 45e:	90 91 09 02 	lds	r25, 0x0209	; 0x800209 <lastIrCode+0x3>
 462:	9a df       	rcall	.-204    	; 0x398 <sendIRCode>
 464:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <irCodeReceived>

		// Reset the flag
		irCodeReceived = 0;
 468:	e8 cf       	rjmp	.-48     	; 0x43a <main+0x1c>

0000046a <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	1f 92       	push	r1
 470:	cd b7       	in	r28, 0x3d	; 61
 472:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7c0064>
 47a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7c0065>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
 47e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	69 f0       	breq	.+26     	; 0x4a0 <sysclk_init+0x36>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 486:	8f b7       	in	r24, 0x3f	; 63
 488:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
 48a:	f8 94       	cli
	return flags;
 48c:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
 48e:	5f 93       	push	r21
 490:	50 e8       	ldi	r21, 0x80	; 128
 492:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
 496:	53 e0       	ldi	r21, 0x03	; 3
 498:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7c0061>
 49c:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 49e:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
 4a0:	0f 90       	pop	r0
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
 4a8:	08 95       	ret

000004aa <__divsf3>:
 4aa:	0c d0       	rcall	.+24     	; 0x4c4 <__divsf3x>
 4ac:	e7 c0       	rjmp	.+462    	; 0x67c <__fp_round>
 4ae:	df d0       	rcall	.+446    	; 0x66e <__fp_pscB>
 4b0:	40 f0       	brcs	.+16     	; 0x4c2 <__divsf3+0x18>
 4b2:	d6 d0       	rcall	.+428    	; 0x660 <__fp_pscA>
 4b4:	30 f0       	brcs	.+12     	; 0x4c2 <__divsf3+0x18>
 4b6:	21 f4       	brne	.+8      	; 0x4c0 <__divsf3+0x16>
 4b8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ba:	19 f0       	breq	.+6      	; 0x4c2 <__divsf3+0x18>
 4bc:	c8 c0       	rjmp	.+400    	; 0x64e <__fp_inf>
 4be:	51 11       	cpse	r21, r1
 4c0:	11 c1       	rjmp	.+546    	; 0x6e4 <__fp_szero>
 4c2:	cb c0       	rjmp	.+406    	; 0x65a <__fp_nan>

000004c4 <__divsf3x>:
 4c4:	ec d0       	rcall	.+472    	; 0x69e <__fp_split3>
 4c6:	98 f3       	brcs	.-26     	; 0x4ae <__divsf3+0x4>

000004c8 <__divsf3_pse>:
 4c8:	99 23       	and	r25, r25
 4ca:	c9 f3       	breq	.-14     	; 0x4be <__divsf3+0x14>
 4cc:	55 23       	and	r21, r21
 4ce:	b1 f3       	breq	.-20     	; 0x4bc <__divsf3+0x12>
 4d0:	95 1b       	sub	r25, r21
 4d2:	55 0b       	sbc	r21, r21
 4d4:	bb 27       	eor	r27, r27
 4d6:	aa 27       	eor	r26, r26
 4d8:	62 17       	cp	r22, r18
 4da:	73 07       	cpc	r23, r19
 4dc:	84 07       	cpc	r24, r20
 4de:	38 f0       	brcs	.+14     	; 0x4ee <__divsf3_pse+0x26>
 4e0:	9f 5f       	subi	r25, 0xFF	; 255
 4e2:	5f 4f       	sbci	r21, 0xFF	; 255
 4e4:	22 0f       	add	r18, r18
 4e6:	33 1f       	adc	r19, r19
 4e8:	44 1f       	adc	r20, r20
 4ea:	aa 1f       	adc	r26, r26
 4ec:	a9 f3       	breq	.-22     	; 0x4d8 <__divsf3_pse+0x10>
 4ee:	33 d0       	rcall	.+102    	; 0x556 <__divsf3_pse+0x8e>
 4f0:	0e 2e       	mov	r0, r30
 4f2:	3a f0       	brmi	.+14     	; 0x502 <__divsf3_pse+0x3a>
 4f4:	e0 e8       	ldi	r30, 0x80	; 128
 4f6:	30 d0       	rcall	.+96     	; 0x558 <__divsf3_pse+0x90>
 4f8:	91 50       	subi	r25, 0x01	; 1
 4fa:	50 40       	sbci	r21, 0x00	; 0
 4fc:	e6 95       	lsr	r30
 4fe:	00 1c       	adc	r0, r0
 500:	ca f7       	brpl	.-14     	; 0x4f4 <__divsf3_pse+0x2c>
 502:	29 d0       	rcall	.+82     	; 0x556 <__divsf3_pse+0x8e>
 504:	fe 2f       	mov	r31, r30
 506:	27 d0       	rcall	.+78     	; 0x556 <__divsf3_pse+0x8e>
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	bb 1f       	adc	r27, r27
 510:	26 17       	cp	r18, r22
 512:	37 07       	cpc	r19, r23
 514:	48 07       	cpc	r20, r24
 516:	ab 07       	cpc	r26, r27
 518:	b0 e8       	ldi	r27, 0x80	; 128
 51a:	09 f0       	breq	.+2      	; 0x51e <__divsf3_pse+0x56>
 51c:	bb 0b       	sbc	r27, r27
 51e:	80 2d       	mov	r24, r0
 520:	bf 01       	movw	r22, r30
 522:	ff 27       	eor	r31, r31
 524:	93 58       	subi	r25, 0x83	; 131
 526:	5f 4f       	sbci	r21, 0xFF	; 255
 528:	2a f0       	brmi	.+10     	; 0x534 <__divsf3_pse+0x6c>
 52a:	9e 3f       	cpi	r25, 0xFE	; 254
 52c:	51 05       	cpc	r21, r1
 52e:	68 f0       	brcs	.+26     	; 0x54a <__divsf3_pse+0x82>
 530:	8e c0       	rjmp	.+284    	; 0x64e <__fp_inf>
 532:	d8 c0       	rjmp	.+432    	; 0x6e4 <__fp_szero>
 534:	5f 3f       	cpi	r21, 0xFF	; 255
 536:	ec f3       	brlt	.-6      	; 0x532 <__divsf3_pse+0x6a>
 538:	98 3e       	cpi	r25, 0xE8	; 232
 53a:	dc f3       	brlt	.-10     	; 0x532 <__divsf3_pse+0x6a>
 53c:	86 95       	lsr	r24
 53e:	77 95       	ror	r23
 540:	67 95       	ror	r22
 542:	b7 95       	ror	r27
 544:	f7 95       	ror	r31
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	c9 f7       	brne	.-14     	; 0x53c <__divsf3_pse+0x74>
 54a:	88 0f       	add	r24, r24
 54c:	91 1d       	adc	r25, r1
 54e:	96 95       	lsr	r25
 550:	87 95       	ror	r24
 552:	97 f9       	bld	r25, 7
 554:	08 95       	ret
 556:	e1 e0       	ldi	r30, 0x01	; 1
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	88 1f       	adc	r24, r24
 55e:	bb 1f       	adc	r27, r27
 560:	62 17       	cp	r22, r18
 562:	73 07       	cpc	r23, r19
 564:	84 07       	cpc	r24, r20
 566:	ba 07       	cpc	r27, r26
 568:	20 f0       	brcs	.+8      	; 0x572 <__divsf3_pse+0xaa>
 56a:	62 1b       	sub	r22, r18
 56c:	73 0b       	sbc	r23, r19
 56e:	84 0b       	sbc	r24, r20
 570:	ba 0b       	sbc	r27, r26
 572:	ee 1f       	adc	r30, r30
 574:	88 f7       	brcc	.-30     	; 0x558 <__divsf3_pse+0x90>
 576:	e0 95       	com	r30
 578:	08 95       	ret

0000057a <__fixunssfsi>:
 57a:	99 d0       	rcall	.+306    	; 0x6ae <__fp_splitA>
 57c:	88 f0       	brcs	.+34     	; 0x5a0 <__fixunssfsi+0x26>
 57e:	9f 57       	subi	r25, 0x7F	; 127
 580:	90 f0       	brcs	.+36     	; 0x5a6 <__fixunssfsi+0x2c>
 582:	b9 2f       	mov	r27, r25
 584:	99 27       	eor	r25, r25
 586:	b7 51       	subi	r27, 0x17	; 23
 588:	a0 f0       	brcs	.+40     	; 0x5b2 <__fixunssfsi+0x38>
 58a:	d1 f0       	breq	.+52     	; 0x5c0 <__fixunssfsi+0x46>
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	1a f0       	brmi	.+6      	; 0x59c <__fixunssfsi+0x22>
 596:	ba 95       	dec	r27
 598:	c9 f7       	brne	.-14     	; 0x58c <__fixunssfsi+0x12>
 59a:	12 c0       	rjmp	.+36     	; 0x5c0 <__fixunssfsi+0x46>
 59c:	b1 30       	cpi	r27, 0x01	; 1
 59e:	81 f0       	breq	.+32     	; 0x5c0 <__fixunssfsi+0x46>
 5a0:	a0 d0       	rcall	.+320    	; 0x6e2 <__fp_zero>
 5a2:	b1 e0       	ldi	r27, 0x01	; 1
 5a4:	08 95       	ret
 5a6:	9d c0       	rjmp	.+314    	; 0x6e2 <__fp_zero>
 5a8:	67 2f       	mov	r22, r23
 5aa:	78 2f       	mov	r23, r24
 5ac:	88 27       	eor	r24, r24
 5ae:	b8 5f       	subi	r27, 0xF8	; 248
 5b0:	39 f0       	breq	.+14     	; 0x5c0 <__fixunssfsi+0x46>
 5b2:	b9 3f       	cpi	r27, 0xF9	; 249
 5b4:	cc f3       	brlt	.-14     	; 0x5a8 <__fixunssfsi+0x2e>
 5b6:	86 95       	lsr	r24
 5b8:	77 95       	ror	r23
 5ba:	67 95       	ror	r22
 5bc:	b3 95       	inc	r27
 5be:	d9 f7       	brne	.-10     	; 0x5b6 <__fixunssfsi+0x3c>
 5c0:	3e f4       	brtc	.+14     	; 0x5d0 <__fixunssfsi+0x56>
 5c2:	90 95       	com	r25
 5c4:	80 95       	com	r24
 5c6:	70 95       	com	r23
 5c8:	61 95       	neg	r22
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	8f 4f       	sbci	r24, 0xFF	; 255
 5ce:	9f 4f       	sbci	r25, 0xFF	; 255
 5d0:	08 95       	ret

000005d2 <__floatundisf>:
 5d2:	e8 94       	clt

000005d4 <__fp_di2sf>:
 5d4:	f9 2f       	mov	r31, r25
 5d6:	96 eb       	ldi	r25, 0xB6	; 182
 5d8:	ff 23       	and	r31, r31
 5da:	81 f0       	breq	.+32     	; 0x5fc <__fp_di2sf+0x28>
 5dc:	12 16       	cp	r1, r18
 5de:	13 06       	cpc	r1, r19
 5e0:	14 06       	cpc	r1, r20
 5e2:	44 0b       	sbc	r20, r20
 5e4:	93 95       	inc	r25
 5e6:	f6 95       	lsr	r31
 5e8:	87 95       	ror	r24
 5ea:	77 95       	ror	r23
 5ec:	67 95       	ror	r22
 5ee:	57 95       	ror	r21
 5f0:	40 40       	sbci	r20, 0x00	; 0
 5f2:	ff 23       	and	r31, r31
 5f4:	b9 f7       	brne	.-18     	; 0x5e4 <__fp_di2sf+0x10>
 5f6:	1b c0       	rjmp	.+54     	; 0x62e <__fp_di2sf+0x5a>
 5f8:	99 27       	eor	r25, r25
 5fa:	08 95       	ret
 5fc:	88 23       	and	r24, r24
 5fe:	51 f4       	brne	.+20     	; 0x614 <__fp_di2sf+0x40>
 600:	98 50       	subi	r25, 0x08	; 8
 602:	d2 f7       	brpl	.-12     	; 0x5f8 <__fp_di2sf+0x24>
 604:	87 2b       	or	r24, r23
 606:	76 2f       	mov	r23, r22
 608:	65 2f       	mov	r22, r21
 60a:	54 2f       	mov	r21, r20
 60c:	43 2f       	mov	r20, r19
 60e:	32 2f       	mov	r19, r18
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	b1 f3       	breq	.-20     	; 0x600 <__fp_di2sf+0x2c>
 614:	12 16       	cp	r1, r18
 616:	13 06       	cpc	r1, r19
 618:	14 06       	cpc	r1, r20
 61a:	44 0b       	sbc	r20, r20
 61c:	88 23       	and	r24, r24
 61e:	3a f0       	brmi	.+14     	; 0x62e <__fp_di2sf+0x5a>
 620:	9a 95       	dec	r25
 622:	44 0f       	add	r20, r20
 624:	55 1f       	adc	r21, r21
 626:	66 1f       	adc	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	ca f7       	brpl	.-14     	; 0x620 <__fp_di2sf+0x4c>
 62e:	55 23       	and	r21, r21
 630:	4a f4       	brpl	.+18     	; 0x644 <__fp_di2sf+0x70>
 632:	44 0f       	add	r20, r20
 634:	55 1f       	adc	r21, r21
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_di2sf+0x68>
 638:	60 ff       	sbrs	r22, 0
 63a:	04 c0       	rjmp	.+8      	; 0x644 <__fp_di2sf+0x70>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	88 0f       	add	r24, r24
 646:	96 95       	lsr	r25
 648:	87 95       	ror	r24
 64a:	97 f9       	bld	r25, 7
 64c:	08 95       	ret

0000064e <__fp_inf>:
 64e:	97 f9       	bld	r25, 7
 650:	9f 67       	ori	r25, 0x7F	; 127
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	60 e0       	ldi	r22, 0x00	; 0
 658:	08 95       	ret

0000065a <__fp_nan>:
 65a:	9f ef       	ldi	r25, 0xFF	; 255
 65c:	80 ec       	ldi	r24, 0xC0	; 192
 65e:	08 95       	ret

00000660 <__fp_pscA>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	16 16       	cp	r1, r22
 666:	17 06       	cpc	r1, r23
 668:	18 06       	cpc	r1, r24
 66a:	09 06       	cpc	r0, r25
 66c:	08 95       	ret

0000066e <__fp_pscB>:
 66e:	00 24       	eor	r0, r0
 670:	0a 94       	dec	r0
 672:	12 16       	cp	r1, r18
 674:	13 06       	cpc	r1, r19
 676:	14 06       	cpc	r1, r20
 678:	05 06       	cpc	r0, r21
 67a:	08 95       	ret

0000067c <__fp_round>:
 67c:	09 2e       	mov	r0, r25
 67e:	03 94       	inc	r0
 680:	00 0c       	add	r0, r0
 682:	11 f4       	brne	.+4      	; 0x688 <__fp_round+0xc>
 684:	88 23       	and	r24, r24
 686:	52 f0       	brmi	.+20     	; 0x69c <__fp_round+0x20>
 688:	bb 0f       	add	r27, r27
 68a:	40 f4       	brcc	.+16     	; 0x69c <__fp_round+0x20>
 68c:	bf 2b       	or	r27, r31
 68e:	11 f4       	brne	.+4      	; 0x694 <__fp_round+0x18>
 690:	60 ff       	sbrs	r22, 0
 692:	04 c0       	rjmp	.+8      	; 0x69c <__fp_round+0x20>
 694:	6f 5f       	subi	r22, 0xFF	; 255
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	08 95       	ret

0000069e <__fp_split3>:
 69e:	57 fd       	sbrc	r21, 7
 6a0:	90 58       	subi	r25, 0x80	; 128
 6a2:	44 0f       	add	r20, r20
 6a4:	55 1f       	adc	r21, r21
 6a6:	59 f0       	breq	.+22     	; 0x6be <__fp_splitA+0x10>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	71 f0       	breq	.+28     	; 0x6c8 <__fp_splitA+0x1a>
 6ac:	47 95       	ror	r20

000006ae <__fp_splitA>:
 6ae:	88 0f       	add	r24, r24
 6b0:	97 fb       	bst	r25, 7
 6b2:	99 1f       	adc	r25, r25
 6b4:	61 f0       	breq	.+24     	; 0x6ce <__fp_splitA+0x20>
 6b6:	9f 3f       	cpi	r25, 0xFF	; 255
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <__fp_splitA+0x2a>
 6ba:	87 95       	ror	r24
 6bc:	08 95       	ret
 6be:	12 16       	cp	r1, r18
 6c0:	13 06       	cpc	r1, r19
 6c2:	14 06       	cpc	r1, r20
 6c4:	55 1f       	adc	r21, r21
 6c6:	f2 cf       	rjmp	.-28     	; 0x6ac <__fp_split3+0xe>
 6c8:	46 95       	lsr	r20
 6ca:	f1 df       	rcall	.-30     	; 0x6ae <__fp_splitA>
 6cc:	08 c0       	rjmp	.+16     	; 0x6de <__fp_splitA+0x30>
 6ce:	16 16       	cp	r1, r22
 6d0:	17 06       	cpc	r1, r23
 6d2:	18 06       	cpc	r1, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	f1 cf       	rjmp	.-30     	; 0x6ba <__fp_splitA+0xc>
 6d8:	86 95       	lsr	r24
 6da:	71 05       	cpc	r23, r1
 6dc:	61 05       	cpc	r22, r1
 6de:	08 94       	sec
 6e0:	08 95       	ret

000006e2 <__fp_zero>:
 6e2:	e8 94       	clt

000006e4 <__fp_szero>:
 6e4:	bb 27       	eor	r27, r27
 6e6:	66 27       	eor	r22, r22
 6e8:	77 27       	eor	r23, r23
 6ea:	cb 01       	movw	r24, r22
 6ec:	97 f9       	bld	r25, 7
 6ee:	08 95       	ret

000006f0 <__umulhisi3>:
 6f0:	a2 9f       	mul	r26, r18
 6f2:	b0 01       	movw	r22, r0
 6f4:	b3 9f       	mul	r27, r19
 6f6:	c0 01       	movw	r24, r0
 6f8:	a3 9f       	mul	r26, r19
 6fa:	70 0d       	add	r23, r0
 6fc:	81 1d       	adc	r24, r1
 6fe:	11 24       	eor	r1, r1
 700:	91 1d       	adc	r25, r1
 702:	b2 9f       	mul	r27, r18
 704:	70 0d       	add	r23, r0
 706:	81 1d       	adc	r24, r1
 708:	11 24       	eor	r1, r1
 70a:	91 1d       	adc	r25, r1
 70c:	08 95       	ret

0000070e <__muldi3>:
 70e:	df 93       	push	r29
 710:	cf 93       	push	r28
 712:	1f 93       	push	r17
 714:	0f 93       	push	r16
 716:	9a 9d       	mul	r25, r10
 718:	f0 2d       	mov	r31, r0
 71a:	21 9f       	mul	r18, r17
 71c:	f0 0d       	add	r31, r0
 71e:	8b 9d       	mul	r24, r11
 720:	f0 0d       	add	r31, r0
 722:	8a 9d       	mul	r24, r10
 724:	e0 2d       	mov	r30, r0
 726:	f1 0d       	add	r31, r1
 728:	03 9f       	mul	r16, r19
 72a:	f0 0d       	add	r31, r0
 72c:	02 9f       	mul	r16, r18
 72e:	e0 0d       	add	r30, r0
 730:	f1 1d       	adc	r31, r1
 732:	4e 9d       	mul	r20, r14
 734:	e0 0d       	add	r30, r0
 736:	f1 1d       	adc	r31, r1
 738:	5e 9d       	mul	r21, r14
 73a:	f0 0d       	add	r31, r0
 73c:	4f 9d       	mul	r20, r15
 73e:	f0 0d       	add	r31, r0
 740:	7f 93       	push	r23
 742:	6f 93       	push	r22
 744:	bf 92       	push	r11
 746:	af 92       	push	r10
 748:	5f 93       	push	r21
 74a:	4f 93       	push	r20
 74c:	d5 01       	movw	r26, r10
 74e:	d0 df       	rcall	.-96     	; 0x6f0 <__umulhisi3>
 750:	8b 01       	movw	r16, r22
 752:	ac 01       	movw	r20, r24
 754:	d7 01       	movw	r26, r14
 756:	cc df       	rcall	.-104    	; 0x6f0 <__umulhisi3>
 758:	eb 01       	movw	r28, r22
 75a:	e8 0f       	add	r30, r24
 75c:	f9 1f       	adc	r31, r25
 75e:	d6 01       	movw	r26, r12
 760:	1f d0       	rcall	.+62     	; 0x7a0 <__muldi3_6>
 762:	2f 91       	pop	r18
 764:	3f 91       	pop	r19
 766:	d6 01       	movw	r26, r12
 768:	c3 df       	rcall	.-122    	; 0x6f0 <__umulhisi3>
 76a:	c6 0f       	add	r28, r22
 76c:	d7 1f       	adc	r29, r23
 76e:	e8 1f       	adc	r30, r24
 770:	f9 1f       	adc	r31, r25
 772:	af 91       	pop	r26
 774:	bf 91       	pop	r27
 776:	14 d0       	rcall	.+40     	; 0x7a0 <__muldi3_6>
 778:	2f 91       	pop	r18
 77a:	3f 91       	pop	r19
 77c:	b9 df       	rcall	.-142    	; 0x6f0 <__umulhisi3>
 77e:	c6 0f       	add	r28, r22
 780:	d7 1f       	adc	r29, r23
 782:	e8 1f       	adc	r30, r24
 784:	f9 1f       	adc	r31, r25
 786:	d6 01       	movw	r26, r12
 788:	b3 df       	rcall	.-154    	; 0x6f0 <__umulhisi3>
 78a:	e6 0f       	add	r30, r22
 78c:	f7 1f       	adc	r31, r23
 78e:	98 01       	movw	r18, r16
 790:	be 01       	movw	r22, r28
 792:	cf 01       	movw	r24, r30
 794:	11 24       	eor	r1, r1
 796:	0f 91       	pop	r16
 798:	1f 91       	pop	r17
 79a:	cf 91       	pop	r28
 79c:	df 91       	pop	r29
 79e:	08 95       	ret

000007a0 <__muldi3_6>:
 7a0:	a7 df       	rcall	.-178    	; 0x6f0 <__umulhisi3>
 7a2:	46 0f       	add	r20, r22
 7a4:	57 1f       	adc	r21, r23
 7a6:	c8 1f       	adc	r28, r24
 7a8:	d9 1f       	adc	r29, r25
 7aa:	08 f4       	brcc	.+2      	; 0x7ae <__muldi3_6+0xe>
 7ac:	31 96       	adiw	r30, 0x01	; 1
 7ae:	08 95       	ret

000007b0 <__umoddi3>:
 7b0:	68 94       	set
 7b2:	01 c0       	rjmp	.+2      	; 0x7b6 <__udivdi3_umoddi3>

000007b4 <__udivdi3>:
 7b4:	e8 94       	clt

000007b6 <__udivdi3_umoddi3>:
 7b6:	8f 92       	push	r8
 7b8:	9f 92       	push	r9
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	05 d0       	rcall	.+10     	; 0x7ca <__udivmod64>
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	9f 90       	pop	r9
 7c6:	8f 90       	pop	r8
 7c8:	08 95       	ret

000007ca <__udivmod64>:
 7ca:	88 24       	eor	r8, r8
 7cc:	99 24       	eor	r9, r9
 7ce:	f4 01       	movw	r30, r8
 7d0:	e4 01       	movw	r28, r8
 7d2:	b0 e4       	ldi	r27, 0x40	; 64
 7d4:	9f 93       	push	r25
 7d6:	aa 27       	eor	r26, r26
 7d8:	9a 15       	cp	r25, r10
 7da:	8b 04       	cpc	r8, r11
 7dc:	9c 04       	cpc	r9, r12
 7de:	ed 05       	cpc	r30, r13
 7e0:	fe 05       	cpc	r31, r14
 7e2:	cf 05       	cpc	r28, r15
 7e4:	d0 07       	cpc	r29, r16
 7e6:	a1 07       	cpc	r26, r17
 7e8:	98 f4       	brcc	.+38     	; 0x810 <__udivmod64+0x46>
 7ea:	ad 2f       	mov	r26, r29
 7ec:	dc 2f       	mov	r29, r28
 7ee:	cf 2f       	mov	r28, r31
 7f0:	fe 2f       	mov	r31, r30
 7f2:	e9 2d       	mov	r30, r9
 7f4:	98 2c       	mov	r9, r8
 7f6:	89 2e       	mov	r8, r25
 7f8:	98 2f       	mov	r25, r24
 7fa:	87 2f       	mov	r24, r23
 7fc:	76 2f       	mov	r23, r22
 7fe:	65 2f       	mov	r22, r21
 800:	54 2f       	mov	r21, r20
 802:	43 2f       	mov	r20, r19
 804:	32 2f       	mov	r19, r18
 806:	22 27       	eor	r18, r18
 808:	b8 50       	subi	r27, 0x08	; 8
 80a:	31 f7       	brne	.-52     	; 0x7d8 <__udivmod64+0xe>
 80c:	bf 91       	pop	r27
 80e:	27 c0       	rjmp	.+78     	; 0x85e <__udivmod64+0x94>
 810:	1b 2e       	mov	r1, r27
 812:	bf 91       	pop	r27
 814:	bb 27       	eor	r27, r27
 816:	22 0f       	add	r18, r18
 818:	33 1f       	adc	r19, r19
 81a:	44 1f       	adc	r20, r20
 81c:	55 1f       	adc	r21, r21
 81e:	66 1f       	adc	r22, r22
 820:	77 1f       	adc	r23, r23
 822:	88 1f       	adc	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	88 1c       	adc	r8, r8
 828:	99 1c       	adc	r9, r9
 82a:	ee 1f       	adc	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	cc 1f       	adc	r28, r28
 830:	dd 1f       	adc	r29, r29
 832:	aa 1f       	adc	r26, r26
 834:	bb 1f       	adc	r27, r27
 836:	8a 14       	cp	r8, r10
 838:	9b 04       	cpc	r9, r11
 83a:	ec 05       	cpc	r30, r12
 83c:	fd 05       	cpc	r31, r13
 83e:	ce 05       	cpc	r28, r14
 840:	df 05       	cpc	r29, r15
 842:	a0 07       	cpc	r26, r16
 844:	b1 07       	cpc	r27, r17
 846:	48 f0       	brcs	.+18     	; 0x85a <__udivmod64+0x90>
 848:	8a 18       	sub	r8, r10
 84a:	9b 08       	sbc	r9, r11
 84c:	ec 09       	sbc	r30, r12
 84e:	fd 09       	sbc	r31, r13
 850:	ce 09       	sbc	r28, r14
 852:	df 09       	sbc	r29, r15
 854:	a0 0b       	sbc	r26, r16
 856:	b1 0b       	sbc	r27, r17
 858:	21 60       	ori	r18, 0x01	; 1
 85a:	1a 94       	dec	r1
 85c:	e1 f6       	brne	.-72     	; 0x816 <__udivmod64+0x4c>
 85e:	2e f4       	brtc	.+10     	; 0x86a <__udivmod64+0xa0>
 860:	94 01       	movw	r18, r8
 862:	af 01       	movw	r20, r30
 864:	be 01       	movw	r22, r28
 866:	cd 01       	movw	r24, r26
 868:	00 0c       	add	r0, r0
 86a:	08 95       	ret

0000086c <_exit>:
 86c:	f8 94       	cli

0000086e <__stop_program>:
 86e:	ff cf       	rjmp	.-2      	; 0x86e <__stop_program>
